---
import { AstraEditor } from '../../components/astra-editor'
import { AstraEditorHandlerbarPlugin } from '../../components/astra-editor/plugins/handlebar'
import { AstraEditorSqlPlugin } from '../../components/astra-editor/plugins/sql'
import { AstraEditorPromptPlugin } from '../../components/astra-editor/plugins/prompt'
//

const SAMPLE_TEXT = `CREATE TABLE customer(
  cust_id INTEGER PRIMARY KEY,
  cust_name TEXT,
  cust_addr TEXT
);

-- some comment here that should be ignore


CREATE VIEW customer_address AS
   SELECT cust_id, cust_addr FROM customer;
CREATE TRIGGER cust_addr_chng
INSTEAD OF UPDATE OF cust_addr ON customer_address
BEGIN
  UPDATE customer SET cust_addr=NEW.cust_addr
   WHERE cust_id=NEW.cust_id;
END;
`

const SCHEMA = {
  outerbase: ['id', 'name'],
  customer: ['id', 'name', 'age'],
}
---

<div>
  <div id="container" class="h-[400px] w-full mt-2">
    <!-- @ts-ignore attributes -->
    <AstraEditor id="editor" client:only="lit" value={SAMPLE_TEXT} theme="freedom">
      <!-- @ts-ignore attributes -->
      <AstraEditorSqlPlugin id="sql" client:only="lit" dialect="sqlite" schema={JSON.stringify(SCHEMA)} />
      <!-- @ts-ignore attributes -->
      <AstraEditorHandlerbarPlugin client:only="lit" variables="variable1,variable2" />
      <!-- @ts-ignore attributes -->
      <AstraEditorPromptPlugin id="prompt-plugin" client:only="lit" />
    </AstraEditor>
  </div>

  <div class="px-4 py-2">
    <select id="theme">
      <option value="freedom">Freedom</option>
      <option value="moondust">Moondust</option>
      <option value="invasion">Invasion</option>
    </select>

    <label>
      <input type="checkbox" id="readonly" />
      Readonly
    </label>

    <label>
      <input type="checkbox" id="wrap" />
      Wrap
    </label>

    <label>
      <input type="checkbox" id="dark" />
      Dark
    </label>
  </div>

  <div class="px-4 py-2 flex gap-4">
    <button id="current-statement" class="border p-2 rounded">Current Statement</button>
    <button id="all-statement" class="border p-2 rounded">All Statements</button>
  </div>

  <div class="px-4 py-2">
    <input id="token" type="text" placeholder="Outerbase Token" class="p-2 border w-full" />
  </div>

  <script>
    const container = document.getElementById('container')
    const readonlyElement = document.getElementById('readonly') as HTMLInputElement
    const wrapElement = document.getElementById('wrap') as HTMLInputElement
    const darkElement = document.getElementById('dark') as HTMLInputElement
    const themeElement = document.getElementById('theme') as HTMLSelectElement
    const tokenElement = document.getElementById('token') as HTMLInputElement

    setTimeout(() => {
      const promptPlugin = document.getElementById('prompt-plugin') as any
      promptPlugin.handleSuggestion(async (promptText: string, selected?: { text: string }) => {
        const selectedText = selected?.text

        // do some fake delay
        await new Promise((resolve) => setTimeout(resolve, 1000))

        const lines = selectedText?.split('\n') || []

        for (let i = 0; i < lines.length; i++) {
          if (Math.random() > 0.5) {
            lines.splice(i, 0, 'some random text ' + Math.random())
            i++
          }
        }

        for (let i = 0; i < 5; i++) {
          // add random lines at the end
          if (Math.random() > 0.5) {
            lines.push('some random text ' + Math.random())
          }
        }

        // randomly remove lines
        const finalLines = lines.filter((_, index) => Math.random() > 0.35)

        return finalLines.join('\n')
      })
    }, 3000)

    tokenElement.onchange = () => {
      const plugin = document.getElementById('prompt-plugin') as any
      plugin.token = tokenElement.value
    }

    readonlyElement.onchange = () => {
      const editor = document.getElementById('editor') as any
      editor.readonly = readonlyElement?.checked
    }

    wrapElement.onchange = () => {
      const editor = document.getElementById('editor') as any
      editor.wrap = wrapElement?.checked
    }

    darkElement.onchange = () => {
      const editor = document.getElementById('editor') as any

      if (darkElement?.checked) {
        container?.classList.add('bg-black')
      } else {
        container?.classList.remove('bg-black')
      }
      editor.color = darkElement?.checked ? 'dark' : undefined
    }

    themeElement.onchange = () => {
      const editor = document.getElementById('editor') as any
      editor.theme = themeElement.value
    }
  </script>
</div>
